Name, Date, Achievement, Topics, Tags, Impact, Source
"Muhammad ibn Musa al-Khwarizmi", "800", "The term '#{algorithm}' is derived from the algorism, the technique of performing arithmetic with Hindu-Arabic numerals developed by al-Khwarizmi. Both '#{algorithm}' and 'algorism' are derived from the Latinized forms of al-Khwarizmi's name, Algoritmi and Algorismi, respectively.", "Algorithms & Data Structures", "Mathematics, Algorithm", "5", "https://en.wikipedia.org/wiki/Muhammad_ibn_Musa_al-Khwarizmi#Arithmetic"
"John Vincent Atanasoff", "1939", "The #{Atanasoff-Berry computer} (ABC) was the first automatic #{electronic digital computer|electronic computer}. The ABC's priority is debated among historians of computer technology, because it was not programmable, nor #{Turing-complete|Turing-Completeness}.", "Algorithms & Data Structures", "Electronic Computer, Computer", "4", "https://en.wikipedia.org/wiki/Atanasoff%E2%80%93Berry_computer"
"Charles Babbage", "1825", "Invented the #{Difference Engine}, an automatic mechanical calculator designed to tabulate polynomial functions. It was not programmable, nor #{Turing-complete|Turing-Completeness}.", "Algorithms & Data Structures", "Difference Engine, Mechanical Computer, Computer", "5", "https://en.wikipedia.org/wiki/Difference_engine"
"Charles Babbage", "1837", "Designed the #{Analytical Engine}. The first, general-purpose, programmable computer. It was 100 years ahead of it's time.", "Algorithms & Data Structures", "Analytical Engine, Mechanical Computer, Computer, Punch Cards", "5", "https://en.wikipedia.org/wiki/Analytical_engine"
"John Backus", "1953", "Created #{Speedcoding}, also known As #{Speedcode}, the first high level #{programming language} built for an #{IBM} computer.", "Algorithms & Data Structures", "Speedcoding, Speedcode, Programming Language, IBM", "4", "https://en.wikipedia.org/wiki/Speedcoding"
"John Backus", "1954", "Lead the team who developed #{FORTRAN} for the #{IBM} 704 computer. #{FORTRAN} was one of the first high-level #{programming languages|programming language} that saw wide-spread use.", "Algorithms & Data Structures", "FORTRAN, Programming Language, IBM", "5", "https://en.wikipedia.org/wiki/Fortran"
"John Backus", "1959", "Served on the design committee for #{ALGOL} 60, an incredibly influential #{programming language} which introduced lexical scoping, code blocks and many syntactical elements common today (if, then, while, for, do, begin, end, etc).", "Algorithms & Data Structures", "ALGOL, Programming Language", "4", "https://en.wikipedia.org/wiki/ALGOL_60"
"John Backus", "1960", "Invented the #{Backus-Naur Form} (previously known as Backus Normal Form), a notation for context-free grammars which is used to describe the syntax of #{programming languages|programming language}.", "Algorithms & Data Structures", "Backus-Naur Form, Backus Normal Form, Programming Language", "4", "https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form"
"John Backus", "1977", "Created #{FP}, a function-level #{programming language}. #{FP} helped spark an interest in the #{functional programming} paradigm.", "Algorithms & Data Structures", "FP, Functional Programming, Function-Level Programming, Programming Language", "2", "https://en.wikipedia.org/wiki/FP_(programming_language)"
"John Backus", "1989", "Created #{FL}, a #{function-level programming} language that is considered a successor to #{FP}.", "Algorithms & Data Structures", "FL, Function-Level Programming, Functional Programming, Programming Language", "2", "https://en.wikipedia.org/wiki/FL_(programming_language)"
"Jean Bartik", "1946", "Became one of the six original programmers on #{ENIAC}.", "Algorithms & Data Structures, Women in Computing", "ENIAC, Programming", "3", "https://en.wikipedia.org/wiki/ENIAC#Programming"
"Jean Bartik", "1948", "Was part of a team charged with developing the concept of the '#{Stored-program computer}'.", "Algorithms & Data Structures, Women in Computing", "Computer, Stored-program computer", "3", "https://en.wikipedia.org/wiki/Stored-program_computer"
"Jean Bartik", "1949", "Helped develop the #{BINAC} AND #{UNIVAC} I computers.", "Algorithms & Data Structures, Women in Computing", "BINAC, UNIVAC, Programming, Computer", "3", "https://en.wikipedia.org/wiki/Jean_Bartik#Career_as_a_computer_programmer"
"Tim Berners-Lee", "1980", "Invented ENQUIRE, a system for sharing documents over the #{Internet}.", "Algorithms & Data Structures", "Internet, WWW", "4", "https://en.wikipedia.org/wiki/ENQUIRE"
"Tim Berners-Lee", "1989", "Invented WorldWideWeb, the first #{Web Browser|WWW}.", "Algorithms & Data Structures", "Internet, WWW", "5", "https://en.wikipedia.org/wiki/WorldWideWeb"
"Tim Berners-Lee", "1990", "Along with Ari Luotonen and Henrik Frystyk, invented CERN HTTPd, the first #{Web Server|HTTP}. It ran as a daemon and was written in C.", "Algorithms & Data Structures", "Internet, WWW, HTTP", "5", "https://en.wikipedia.org/wiki/CERN_httpd"
"Tim Berners-Lee", "1990", "Specified #{HTML}, an SGML-based markup language for describing #{hypertext} documents. Originally, #{HTML} only included 18 tags.", "Algorithms & Data Structures", "Internet, Hypertext, WWW, HTML", "5", "https://en.wikipedia.org/wiki/HTML"
"Tim Berners-Lee", "1991", "Formally released the Hypertext Transport Protocol (#{HTTP}) version 0.9 along with a team of Engineers. #{HTTP} v0.9 was only capable of GET requests.", "Algorithms & Data Structures", "Internet, WWW, HTTP", "5", "https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"
"George Boole", "1847", "Invented Symbolic #{Logic}, the basis for Boolean Algebra, a mathematical system for describing logical relations. It would become the basis for electronic #{circuit design}.", "Algorithms & Data Structures", "Mathematics, Logic, Circuit Design", "5", "https://en.wikipedia.org/wiki/Boolean_algebra"
"George Boole", "1854", "Published 'The Laws of Thought', which further laid-out #{algebraic logic|Logic}.", "Algorithms & Data Structures", "Mathematics, Logic", "4", "https://en.wikipedia.org/wiki/The_Laws_of_Thought"
"Per Brinch Hansen", "1969", "Primary developer of the RC 4000 Multiprogramming System (also known as Monitor), the first #{operating system} to implement a kernel. Although not particularly successful, it was hugely influential in the design of future #{operating systems}.", "Algorithms & Data Structures", "Operating System, RC 4000", "3", "https://en.wikipedia.org/wiki/RC_4000_multiprogramming_system"
"Per Brinch Hansen", "1973", "Published 'Operating System Principles', the first comprehensive textbok on #{operating systems}. It was hailed for it's simplicity and clarity in treatment of a complex subject.", "Algorithms & Data Structures", "Operating System, Book", "3", "https://en.wikipedia.org/wiki/Per_Brinch_Hansen#Operating_Systems"
"Per Brinch Hansen", "1973", "Along with Tony Hoare, invented #{Monitors}, a construct for allowing #{threads|Concurrency} to have mutual exclusion and the ability to wait/block for conditions to become true.", "Algorithms & Data Structures", "Concurrency, Monitors", "3", "https://en.wikipedia.org/wiki/Monitor_(synchronization)"
"Per Brinch Hansen", "1975", "Invented Concurrent #{Pascal}, the first #{programming language} to implement #{monitors}.", "Algorithms & Data Structures", "Concurrency, Programming Language, Pascal, Monitors", "3", "https://en.wikipedia.org/wiki/Concurrent_Pascal"
"Per Brinch Hansen", "1977", "Published 'The Architecture of Concurrent Programs', the first comprehensive textbok on #{concurrent programming|Concurrency}.", "Algorithms & Data Structures", "Concurrency, Book", "2", "https://en.wikipedia.org/wiki/Per_Brinch_Hansen#Operating_Systems"
"Per Brinch Hansen", "1978", "Published a paper on #{distributed proceses|Distributed Computing}, which introduced concepts which are now known as #{remote procedure calling|RPC} (RPC). RPC is a technique for executing code in a remote address space (such as another computer in a network).", "Algorithms & Data Structures", "Distributed Computing, RPC, Paper", "3", "https://en.wikipedia.org/wiki/Remote_procedure_call"
"Nikolay Brusentsov", "1958", "Invented #{Setun}, a balanced #{ternary} #{computer}. Setun used three fundamental values (-1, 0, 1) instead of the more common two values (0, 1) in #{binary} computers.", "Algorithms & Data Structures", "Computer, Ternary, Setun", "3", "https://en.wikipedia.org/wiki/Setun"
"Nikolay Brusentsov", "1970", "Invented #{Setun} 70, whose #{CPU} design presented many concepts that would later be incorporated (perhaps independently) into the #{Reduced Instruction-Set Computing|RISC} (RISC) architecture.", "Algorithms & Data Structures", "Computer, Setun, RISC, CPU", "3", "http://en.uacomputing.com/persons/brusentsov/"
"Vannevar Bush", "1945", "Published 'As We May Think', an article which introduced the #{Memex} - a theoretical electronic device that would allow users to store and retrieve books, records and communications. The design involved linking documents via association, which would come to be very influential in the creation of #{hypertext} systems.", "Algorithms & Data Structures", "Computer, Memex, Hypertext", "4", "https://en.wikipedia.org/wiki/Memex"
"David Caminer", "1951", "Helped design the #{Lyons Electonic Office} (LEO) computer, which was the first business #{computer}. For his effort, David Caminer is often called the world's first Software Engineer.", "Algorithms & Data Structures", "Computer, LEO", "3", "https://en.wikipedia.org/wiki/LEO_%28computer%29"
"Vint Cerf", "1973", "Conducted research around the notion of packet-switching #{network|Networking} protocols.", "Algorithms & Data Structures", "Networking, Internet", "3", "https://en.wikipedia.org/wiki/Vint_Cerf"
"Vint Cerf", "1975", "Co-designed the #{TCP/IP} #{network|Networking} protocol suite for the US Department of Defense.", "Algorithms & Data Structures", "TCP/IP, Networking, Internet", "4", "https://en.wikipedia.org/wiki/Internet_protocol_suite"
"Vint Cerf", "1984", "Lead engineer on MCI Mail, the first commercial #{email} service to be connected to the #{Internet}", "Algorithms & Data Structures", "Email, Networking, Internet", "4", "https://en.wikipedia.org/wiki/MCI_Mail"
"Vint Cerf", "1992", "Co-founded the Internet Society to provide guidance for standards and education related to the #{Internet}.", "Algorithms & Data Structures", "Internet", "2", "https://en.wikipedia.org/wiki/Internet_Society"
"Noam Chomsky", "1956", "Invented the Chomsky Hierarchy, which is a set of classes of formal grammars that have become especially important in the creation of #{compilers} and #{interpreters} in #{computer programming|Programming Language}.", "Algorithms & Data Structures", "Compiler, Programming Language, Formal Grammar", "4", "https://en.wikipedia.org/wiki/Chomsky_hierarchy"
"Alonzo Church", "1933", "Invented #{lambda calculus}, a formal mathematical system for presenting #{computation} based purely on function abstraction and application. Lambda calculus proved to be a universal model of #{computation} that would be incredibly important in the development of #{programming languages}.", "Algorithms & Data Structures", "Lambda Calculus, Computation, Programming Language", "5", "https://en.wikipedia.org/wiki/Lambda_calculus"
"Alonzo Church", "1935", "Provided a negative answer to the #{Entscheidungsproblem}, which asks if there is an algorithm to determine if an axiom is true in all models of a theory. This would have great impact on the theory of #{computation} in later years.", "Algorithms & Data Structures", "Computation, Entscheidungsproblem", "5", "https://en.wikipedia.org/wiki/Entscheidungsproblem"
"Alonzo Church", "1936", "Based on inconsistencies found by Kleene and Rosser, refined the #{lambda calculus} to present only the portion relevent to computation. This is now known as the untyped lambda calculus.", "Algorithms & Data Structures", "Lambda Calculus, Computation", "4", "https://en.wikipedia.org/wiki/Lambda_calculus"
"Alonzo Church", "1936", "Co-articulated what has become known as the #{Church-Turing Thesis}, which asserts that for any operation carried out by an algorithm there exists an equivalent #{lambda expression|Lambda Calculus} (or #{Turing Machine}). This would have great impact on the theory of #{computation} in later years.", "Algorithms & Data Structures", "Computation, Church-Turing Thesis", "5", "https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis"
"Wesley A. Clark", "1955", "Created the logic systems for the #{TX-0} (Transistorized Experimental computer zero) #{computer}, an early fully-transistorized digital computer that was used at MIT.", "Algorithms & Data Structures", "Computer, TX-0, Transistor", "3", "https://en.wikipedia.org/wiki/TX-0"
"Wesley A. Clark", "1958", "Chief Architect for the #{TX-2} (Transistorized Experimental computer two) #{computer}, an early fully-transistorized digital computer that was important in the advancement of the field of #{artificial intelligence}.", "Algorithms & Data Structures", "Computer, TX-2, Transistor, Artificial Intelligence", "3", "https://en.wikipedia.org/wiki/TX-2"
"Wesley A. Clark", "1962", "Co-designed #{LINC}, the world's first #{minicomputer} and forerunner to the now ubiquitous personal #{computer}. #{LINC} would go on to inspire many ideas for the wildly successful #{PDP-8|PDP} minicomputer.", "Algorithms & Data Structures", "Computer, Minicomputer, LINC, PDP, Computer", "4", "https://en.wikipedia.org/wiki/LINC"
"Edmund M. Clarke", "1979", "Published a paper proving that for certain #{programming language} constructs it is impossible to obtain good #{Hoare Axiom Systems|Hoare logic}. The paper demonstrated that #{recursive|Recursion} procedures with parameters in languages with a static scope for identifiers and #{coroutines} in languages that allow parameterless #{recursive|Recursion} procedures cannot be proven correct via the #{Hoare logic} formal system.", "Algorithms & Data Structures", "Programming Language, Hoare logic", "2", "http://www.cs.cmu.edu/~emc/papers/Papers%20In%20Refereed%20Journals/79_impossible_hoareaxiom.pdf"
"Edmund M. Clarke", "1981", "Along with his student E. Allen Emerson, invented and developed #{model checking}, a system for mathematically verifying that a given model meets a formal specification. This would become important for the verification of hardware systems.", "Algorithms & Data Structures", "Model Checking, Hardware", "3", "https://en.wikipedia.org/wiki/Model_checking"
"Edgar F. Codd", "1970", "Published a paper entitled 'A Relational Model of Data for Large Shared Data Banks', which laid the theoretical foundations for relational databases and query languages such as SQL.", "Algorithms & Data Structures", "Database, Relational Database", "4", "https://en.wikipedia.org/wiki/Edgar_F._Codd#Work"
"Douglas Engelbart", "1965", "Along with his team, invented the concepts for bitmapped screen displays.", "Algorithms & Data Structures", "Bitmap, Hardware", "4", "https://en.wikipedia.org/wiki/Raster_graphics"
"Douglas Engelbart", "1965", "Along with his team, invented early systems implementing the foundations for #{hypertext} - interlinked systems of documents.", "Algorithms & Data Structures", "Hypertext, Internet", "4", "https://en.wikipedia.org/wiki/Hypertext#History"
"Douglas Engelbart", "1967", "Along with Bill English, invented the #{computer mouse|Mouse} in the form of a wooden shell atop two metal wheels. It was described as an 'X-Y position indicator for a display system'.", "Algorithms & Data Structures", "Mouse, Hardware", "5", "https://en.wikipedia.org/wiki/Computer_mouse"
"Douglas Engelbart", "1968", "Presented and demonstrated original inventions including the #{Computer Mouse|Mouse}, #{Computer Networks|Network}, #{Hypertext} and several others.", "Algorithms & Data Structures", "Demonstration", "2", "https://en.wikipedia.org/wiki/The_Mother_of_All_Demos"
"E. Allen Emerson", "1981", "Along with Edmund M. Clarke, invented and developed #{model checking}, a system for mathematically verifying that a given model meets a formal specification. This would become important for the verification of hardware systems.", "Algorithms & Data Structures", "Model Checking, Hardware", "3", "https://en.wikipedia.org/wiki/Model_checking"
"Stephen Cook", "1971", "Published the seminal paper 'The Complexity of Theorem Proving Procedures', which introduced the notions of Cook Reduction and #{NP-Completeness|NP-Complete}. NP-Completeness refers to problems for which no efficient algorithm exists. The paper also famously posed the #{P vs. NP} question.", "Algorithms & Data Structures, Publications", "NP-Complete, Computation, Complexity, P vs. NP", "4", "https://en.wikipedia.org/wiki/NP-complete"
"Stephen Cook", "1975", "Published the influential paper 'Feasibly Constructive Proofs and the Propositional Calculus', which formalised the notion of proofs using only polynomial-time concepts.", "Algorithms & Data Structures, Publications", "NP-Complete, Complexity", "3", "https://en.wikipedia.org/wiki/Stephen_Cook#Research"
"Alonzo Church", "1936", "Along with his team, invented early systems implementing the foundations for #{hypertext} - interlinked systems of documents.", "Algorithms & Data Structures", "Hypertext, Internet", "4", "https://en.wikipedia.org/wiki/Hypertext#History"
"Douglas Engelbart", "1936", "Along with Bill English, invented the #{computer mouse|Mouse} in the form of a wooden shell atop two metal wheels. It was described as an 'X-Y position indicator for a display system'.", "Algorithms & Data Structures", "Mouse, Hardware", "5", "https://en.wikipedia.org/wiki/Computer_mouse"
"Douglas Engelbart", "1968", "Presented and demonstrated original inventions including the #{Computer Mouse|Mouse}, #{Computer Networks|Network}, #{Hypertext} and several others.", "Algorithms & Data Structures", "Demonstration", "2", "https://en.wikipedia.org/wiki/The_Mother_of_All_Demos"
"E. Allen Emerson", "1936", "Along with Edmund M. Clarke, invented and developed #{model checking}, a system for mathematically verifying that a given model meets a formal specification. This would become important for the verification of hardware systems.", "Algorithms & Data Structures", "Model Checking, Hardware", "3", "https://en.wikipedia.org/wiki/Model_checking"
"Wil van der Aalst", "1992", "Conducted research into the application of #{Petri Nets} to workflow management systems.", "Algorithms & Data Structures", "Petri Net, Workflow Management System", "1", "https://en.wikipedia.org/wiki/Wil_van_der_Aalst#Work"
"Wil van der Aalst", "2004", "Led the development of the YAWL, a workflow system inspired by Petri Nets.", "Algorithms & Data Structures", "Petri Net, Workflow Management System, YAWL", "1", "http://yawlfoundation.org/"
"Carl Adam Petri", "1939", "Invented #{Petri Nets|Petri Net}, a mathematical language for describing distributed systems. He was 13.", "Algorithms & Data Structures", "Petri Net, Distributed Computing", "3", "https://en.wikipedia.org/wiki/Petri_net"
"Hal Abelson", "1981", "Led the development of the first implementation of the #{Logo} programming language for the Apple II, which made the language widely available on personal computers.", "Algorithms & Data Structures, Programming Languages", "Logo, Programming Language", "2", "https://en.wikipedia.org/wiki/Logo_%28programming_language%29"
"Hal Abelson", "1985", "Co-authored the Structure and Interpretation of Computer Programs (#{SICP}), an introductory computer science textbook that is widely considered a classic text.", "Algorithms & Data Structures, Publications", "SICP, Lisp", "3", "https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs"
"Wally Feurzeig", "1967", "Co-invented #{Logo}, an educational programming language and dialect of #{Lisp}. Logo introduced the notion of Turtle graphics, in which commands were interpreted as line graphics.", "Algorithms & Data Structures, Programming Languages", "Logo, Lisp", "3", "https://en.wikipedia.org/wiki/Logo_%28programming_language%29"
"Seymour Papert", "1967", "Co-invented #{Logo}, an educational programming language and dialect of #{Lisp}. Logo introduced the notion of Turtle graphics, in which commands were interpreted as line graphics.", "Algorithms & Data Structures, Programming Languages", "Logo, Lisp", "3", "https://en.wikipedia.org/wiki/Logo_%28programming_language%29"
"Seymour Papert", "1972", "Co-invented the first #{Logo} turtle device, an educational robot that was capable of interpreting the #{Logo} programming language. The robots were capable of outputting results onto a peice of paper via a mounted pen.", "Algorithms & Data Structures, Robotics", "Logo", "2", "https://en.wikipedia.org/wiki/Turtle_(robot)"
"Cynthia Solomon", "1967", "Co-invented #{Logo}, an educational programming language and dialect of #{Lisp}. Logo introduced the notion of Turtle graphics, in which commands were interpreted as line graphics.", "Algorithms & Data Structures, Programming Languages, Women in Computing", "Logo, Lisp", "3", "https://en.wikipedia.org/wiki/Logo_%28programming_language%29"
"Leonard Adelman", "1994", "Published a paper which described the experimental use of DNA as a computational system by solving a trivial instance of an #{NP-Complete} problem using DNA.", "Publications, Algorithms & Data Structures", "DNA", "2", "https://en.wikipedia.org/wiki/Leonard_Adleman#Discovery"
"Leonard Adelman", "1977", "Co-created the #{RSA} #{encryption} algorithm that is widely used for secure data transmission. In the RSA cryptosystem, there are two keys - a public encryption key and a private decryption key.", "Algorithms & Data Structures, Cryptography", "RSA", "4", "https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29"
"Manindra Agrawal", "2002", "Co-created the AKS primality test algorithm in a paper called 'PRIMES is in P'. The algorithm determines whether a number is prime or composite within #{polynomial time|P vs. NP}, which was previously an open question in theoretical computer science.", "Algorithms & Data Structures, Publications", "P vs. NP", "3", "https://en.wikipedia.org/wiki/AKS_primality_test"
"Nitin Saxena", "2002", "Co-created the AKS primality test algorithm in a paper called 'PRIMES is in P'. The algorithm determines whether a number is prime or composite within #{polynomial time|P vs. NP}, which was previously an open question in theoretical computer science.", "Algorithms & Data Structures, Publications", "P vs. NP", "3", "https://en.wikipedia.org/wiki/AKS_primality_test"
"Neeraj Kayal", "2002", "Co-created the AKS primality test algorithm in a paper called 'PRIMES is in P'. The algorithm determines whether a number is prime or composite within #{polynomial time|P vs. NP}, which was previously an open question in theoretical computer science.", "Algorithms & Data Structures, Publications", "P vs. NP", "3", "https://en.wikipedia.org/wiki/AKS_primality_test"
"Luis Von Ahn", "2000", "Did early pioneering work on #{CAPTCHAS|CAPTCHA}, a simple challenge-response test to tell Humans and computers apart.", "Algorithms & Data Structures, Computer Security", "CAPTCHA", "2", "https://en.wikipedia.org/wiki/CAPTCHA"
"Luis Von Ahn", "2005", "Introduced the notion of Human Computation, a form of computation which combines human brainpower and computers to solve problems neither could solve alone.", "Algorithms & Data Structures, Publication", "Human Computation", "2", "https://en.wikipedia.org/wiki/Human-based_computation_game"
"Alfred Aho", "1976", "Devised efficient algorithms for #{regular expressions} and string-pattern matching that would be utilised by the #{yacc} #{parser generator} and #{lex} #{lexical analyser} generator that together form the front-end of many modern compilers.", "Algorithms & Data Structures, Compilers & Interpreters", "Regular Expression, yacc, lex, parser generator, lexical analyser", "3", "https://en.wikipedia.org/wiki/Alfred_Aho#Career"
"Alfred Aho", "1977", "Co-authored 'Principles of Compiler Design', also known as the 'Dragon Book', which is widely considered a classic text in computer science.", "Algorithms & Data Structures, Compilers & Interpreters, Publications", "Book", "3", "https://en.wikipedia.org/wiki/Principles_of_Compiler_Design"
"Alfred Aho", "1977", "Co-developed #{AWK}, a programming language for text processing that is still shipped on most Unix-like operating systems.", "Algorithms & Data Structures, Compilers & Interpreters", "AWK, Scripting language", "3", "https://en.wikipedia.org/wiki/AWK"
"Frances E. Allen", "1966", "Published the paper 'Program Optimization', which laid the conceptual basis for systematic analysis and transformation of computer programs.", "Algorithms & Data Structures, Compilers & Interpreters, Publications, Women in Computing", "Optimizing Compiler", "3", "http://awards.acm.org/award_winners/allen_1012327.cfm"
"Frances E. Allen", "1970", "Published several papers on the topic of optimizing compilers. Optimizing compilers, among other things, attempt to improve the execution time of output programs.", "Algorithms & Data Structures, Compilers & Interpreters, Publications, Women in Computing", "Optimizing Compiler", "2", "http://awards.acm.org/award_winners/allen_1012327.cfm"
"Sanjeev Arora", "1991", "Produced foundational work on the #{PCP theorem}, a cornerstone of computational hardness of approximation, which investigates the inherent difficulty in designing efficient approximation algorithms.", "Algorithms & Data Structures, Publications, Theoretical Computer Science", "PCP Theorem, Computational complexity", "2", "https://en.wikipedia.org/wiki/PCP_theorem"
"Sanjeev Arora", "2010", "Discovered a polynomial time approximation scheme for the euclidean #{travelling salesman problem}, an #{NP-hard|P vs. NP} problem in #{theoretical computer science} that searches for the most effectient path between vertices in an undirected weighted graph.", "Algorithms & Data Structures, Theoretical Computer Science", "P vs. NP, Travelling salesman problem", "2", "https://en.wikipedia.org/wiki/Travelling_salesman_problem"
"Charles Bachman", "1963", "Developed the 'Integrated Data Store' (#{IDS}), a pioneering network database that was known for it's high performance. IDS is unmatched in performance even today.", "Algorithms & Data Structures, Databases", "IDS", "3", "https://en.wikipedia.org/wiki/Integrated_Data_Store"
"Victor Bahl", "1999", "Designed and deployed the world's first free public area Wi-Fi hotspot in a Washington Shopping Center. The effort introduced several now-common protocols in Wi-Fi networks.", "Algorithms & Data Structures, Internet", "Wi-Fi", "3", "http://research.microsoft.com/en-us/um/people/bahl/full-bio.aspx"
"Rudolf Bayer", "1969", "Co-created the #{B-Tree} data structure - a self-balancing tree structure that is common in #{databases} and #{filesystems|Filesystem}.", "Algorithms & Data Structures", "B-Tree", "3", "https://en.wikipedia.org/wiki/B-tree"
"Rudolf Bayer", "1972", "Co-created the #{UB-Tree} data structure - a variation of the #{B-Tree} for multidimensional data.", "Algorithms & Data Structures", "B-Tree, UB-Tree", "2", "https://en.wikipedia.org/wiki/UB-tree"
"Rudolf Bayer", "1972", "Created the #{Red-Black Tree} data structure - a self-balancing binary search tree that is the basis for many higher-level data structures because of it's performance guarantees.", "Algorithms & Data Structures", "Red-Black Tree", "3", "https://en.wikipedia.org/wiki/Red%E2%80%93black_tree"
"Gordon Bell", "1960", "Created the I/O subsystem of the #{PDP-1|PDP} minicomputer, including the first #{Universal asynchronous receiver/transmitter|UART} (UART). A UART is a hardware device for translating data that is a common component of modern microcontrollers.", "Algorithms & Data Structures, Hardware", "Minicomputer, UART, PDP", "2", "https://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter"
"David Blei", "2003", "Co-developed 'latent Dirichlet allocation' in a highly influential paper. LDA is a generative statistical model that is common in #{natural language processing}", "Algorithms & Data Structures, Publications", "Natural Language Processing", "2", "https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation"
"Manuel Blum", "1967", "Developed an axiomatic complexity theory which introduced the #{Blum axioms} and several influential theorems in compuational complexity.", "Algorithms & Data Structures", "Complexity, Blum axioms", "3", "https://en.wikipedia.org/wiki/Blum_axioms"
"Tommy Flowers", "1943", "Designed #{Colossus}, the world's first programmable, electronic, digital computer. Colossus was used for the collection of highly-secretive German communications during World War II.", "Algorithms & Data Structures, Early Computers", "Colossus, Bletchley Park", "4", "https://en.wikipedia.org/wiki/Colossus_computer"
"Corrado Böhm", "1951", "Developed Böhm's Language, the first full #{meta-circular} compiler. A meta-circular evaluator is one whose features are restatements of existing features of the host language.", "Algorithms & Data Structures, Compilers & Interpreters, Programming Paradigms", "Meta-circular", "3", "https://en.wikipedia.org/wiki/B%C3%B6hm%27s_language"
"Corrado Böhm", "1966", "Co-published the 'Structured Program Theorem', which paved the way for the #{structured programming} paradigm. Structured programming encourages the use of sub routines, blocks and loops over simple jumps like #{goto}.", "Algorithms & Data Structures, Programming Paradigms", "Structured programming", "4", "https://en.wikipedia.org/wiki/Structured_program_theorem#Implications_and_refinements"
"Corrado Böhm", "1968", "Published Böhm's Theorem, which proved that two terms of #{Lambda Calculus} having syntactically different normal forms with respect to β-η-reduction cannot be consistently equated.", "Algorithms & Data Structures, Programming Paradigms", "Functional programming, Lambda Calculus", "2", "http://www.corradobohm.it/Corrado_Bohm/Biography.html"
"Gottlob Frege", "1879", "Published Begriffsschrift, which formalised the foundations for first-order #{logic}. First-order logic is an important pre-cursor to the development of theories of computation and eventually programming languages.", "Algorithms & Data Structures, Foundations, Publications", "Mathematics, First-order logic", "5", "https://en.wikipedia.org/wiki/First-order_logic"
"Seymour Ginsberg", "1958", "Proved that 'don't care' circuit minimization does not necessarily yield a minimal result. 'Don't Care' terms are used in digital logic to formulate appropriate circuit designs.", "Algorithms & Data Structures, Foundations", "Digital logic, Automata theory", "2", "https://en.wikipedia.org/wiki/Don%27t-care_term"
"Seymour Ginsberg", "1964", "Became the first person to observe the connection betwen #{context-free languages} and #{ALGOL}-like languages. This shifted the focus of the field of formal language theory to programming language research.", "Algorithms & Data Structures, Foundations, Programming languages", "Automata theory, Context-free languages, Formal languages, ALGOL", "4", "https://en.wikipedia.org/wiki/Context-free_grammar"
"Seymour Ginsberg", "1967", "Co-created the #{abstract family of languages} mathematical notation. This notation generalizes characteristics common to the #{regular languages}, the #{context-free languages} and other families of formal languages.", "Algorithms & Data Structures, Foundations, Programming languages", "Automata theory, Context-free languages, Formal languages, Abstract family of languages", "3", "https://en.wikipedia.org/wiki/Abstract_family_of_languages"
"Kurt Gödel", "1931", "Published the #{incompleteness theorems}, which helped the ground-work for the very notion of computability (see #{Entscheidungsproblem}). This work greatly influenced future work in theoretical computer science.", "Algorithms & Data Structures, Foundations", "Mathematics, Incompleteness theorems, Logic, First-order logic", "5", "https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems"
"Kurt Gödel", "1931", "Invented the #{Gödel Numbering} function, which assigns the symbols of some formal language to a unique natural number. Gödel numbers were used heavily in mathematical proofs during the early days of #{theoretical computer science}.", "Algorithms & Data Structures, Foundations", "Mathematics, Godel Numbering", "3", "https://en.wikipedia.org/wiki/G%C3%B6del_numbering"
"Lois Haibt", "1957", "Became one of the ten-person team who created the original #{FORTRAN} compiler. Haibt was tasked with developing the control-flow subsystem.", "Algorithms & Data Structures, Programming languages, Women in Computing", "FORTRAN, IBM", "3", "https://en.wikipedia.org/wiki/Fortran"
"Margaret Hamilton", "1965", "Became director of software programming for Apollo and Skylab. This included the Apollo 11 mission, which was the first to successfully land Humans on the moon.", "Algorithms & Data Structures, Women in Computing, Early Computers", "Software engineering", "3", "https://en.wikipedia.org/wiki/Apollo_Guidance_Computer"
"Margaret Hamilton", "1971", "Helped to popularize the term '#{Software Engineering}', which helped distinguish computer programming from other engineering disciplines.", "Algorithms & Data Structures, Women in Computing", "Software engineering", "2", "https://en.wikipedia.org/wiki/Software_engineering"
"C. A. R. Hoare", "1959", "Invented Quicksort, a non-stable comparison sorting #{algorithm|Algorithms and data structures}. Quicksort, on average, displays O(n log n) performance making it very practical for everyday usage.", "Algorithms & Data Structures", "Sorting algorithms, Quicksort", "4", "https://en.wikipedia.org/wiki/Quicksort"
"C. A. R. Hoare", "1960", "Invented Quickselect, a selection #{algorithm|Algorithms and data structures} based on #{Quicksort} that finds the Kth smallest item in an unordered list. It, On average, displays O(n) performance.", "Algorithms & Data Structures", "Selection algorithms, Quickselect", "3", "https://en.wikipedia.org/wiki/Quickselect"
"C. A. R. Hoare", "1969", "Invented #{Hoare logic}, a formal system with a set of logical rules for reasoning rigorously about the correctness of computer programs.", "Algorithms & Data Structures", "Formal languages, Hoare logic", "3", "https://en.wikipedia.org/wiki/Hoare_logic"
"C. A. R. Hoare", "1973", "Along with Per Brinch Hansen, invented #{Monitors}, a construct for allowing #{threads|Concurrency} to have mutual exclusion and the ability to wait/block for conditions to become true.", "Algorithms & Data Structures", "Concurrency, Monitors", "3", "https://en.wikipedia.org/wiki/Monitor_(synchronization)"
"Herman Hollerith", "1884", "Invented a tabulating machine that allowed the recording of data on a medium that could then be read by a machine. This invention would mark the beginning of the modern era of data processing and computation.", "Algorithms & Data Structures, Early computers", "IBM, Punch cards, Computer", "5", "https://en.wikipedia.org/wiki/Unit_record_equipment"
"Herman Hollerith", "1889", "Entered a contract with the US Census Office to build tabulating machines for the 1890 census. It would save over two years of processing time of census results. His company would eventually be renamed to International Business Machines (#{IBM}).", "Algorithms & Data Structures, Early computers", "IBM, Punch cards, Computer, Tabulating machines", "5", "https://en.wikipedia.org/wiki/1890_United_States_Census"
"Herman Hollerith", "1901", "Invented the first keypunch, a device for punching holes in #{paper card|Punch cards} based on the users interation with an input device (such as a keyboard).", "Algorithms & Data Structures, Early computers", "Punch cards", "3", "https://en.wikipedia.org/wiki/Keypunch"
"Grace Hopper", "1952", "Developed a #{compiler|compilers} for the #{A-0} programming language. This was the first compiler ever developed for a modern computer. It's function was simple and would perhaps be considered a linker or loader in modern terms.", "Algorithms & Data Structures, Programming languages, Women in Computing", "UNIVAC, A-0, compilers", "5", "https://en.wikipedia.org/wiki/A-0_programming_language"
"Grace Hopper", "1959", "Developed a #{compiler|compilers} for the #{FLOW-MATIC} (B-0) programming language. The FLOW-MATIC language design had a strong influence on #{COBOL}.", "Algorithms & Data Structures, Programming languages", "UNIVAC, FLOW-MATIC, compilers, Women in Computing", "4", "https://en.wikipedia.org/wiki/FLOW-MATIC"
"Grace Hopper", "1959", "Joined the committee who designed the #{COBOL} programming language. COBOL used many ideas from Grace Hopper's earlier language #{FLOW-MATIC}, including the use of an English-like syntax.", "Algorithms & Data Structures, Programming languages, Women in Computing", "COBOL, FLOW-MATIC, compilers", "4", "https://en.wikipedia.org/wiki/COBOL"
"Cuthbert Hurd", "1952", "Was a leading voice in the development of the #{IBM 701} computer, which was the first commercial #{Stored-program computer}.", "Algorithms & Data Structures, Early Computers", "IBM, IBM 701, Stored-program Computer", "3", "https://en.wikipedia.org/wiki/IBM_701"
"Cuthbert Hurd", "1953", "Was important in the development of the #{IBM 650} computer, which was the first mass-produced computer with nearly 2,000 systems shipped by the early 1960s.", "Algorithms & Data Structures, Early Computers", "IBM, IBM 650", "2", "https://en.wikipedia.org/wiki/IBM_650"
"Kenneth E. Iverson", "1955", "Established the first graduate course in computer science at Harvard University. It was called 'Automatic Data Processing'.", "Algorithms & Data Structures", "Education", "2", "https://en.wikipedia.org/wiki/Kenneth_E._Iverson#Harvard_.281955.E2.80.931960.29"
"Kenneth E. Iverson", "1964", "Whilst at #{IBM}, developed the #{APL} (A Programing Language) programming language. APL used a wide array of characters in it's syntax which led to very concise code - even requiring a specially design keyboard in many cases! It would prove to be very influential to future programming languages.", "Algorithms & Data Structures, Programming Languages", "IBM, APL, Compilers", "4", "https://en.wikipedia.org/wiki/APL_(programming_language)"
"Kenneth E. Iverson", "1990", "Along with Roger Hui, developed the #{J} programming language. J was a dialect of #{APL} that used only the ASCII characters. J also took ideas from the #{FP} and #{FL} languages of John Backus.", "Algorithms & Data Structures, Programming Languages", "IBM, APL, J, FL, FP, Compilers", "2", "https://en.wikipedia.org/wiki/J_(programming_language)"
"Joseph Marie Jacquard", "1801", "Demonstracted the #{Jacquard Loom}, a programmable mechanical loom intended to simplify the process of manufacturing textiles. The loom was programmed via a series of punched cards. This would greatly inspire future inventors such as Charles Babbage (#{Analytical Engine}) and Herman Hollerith (#{Tabulating machines}).", "Algorithms & Data Structures, Early Computers", "Punch cards, Jacquard Loom", "5", "https://en.wikipedia.org/wiki/Jacquard_loom"
"Maurice Karnaugh", "1953", "Developed the Karnaugh Map, a pictorial method of simplifying #{boolean algebra} exressions. Karnaugh Maps were to prove useful in early digital circuit design.", "Algorithms & Data Structures", "Logic, Mathematics, Boolean Algebra", "3", "https://en.wikipedia.org/wiki/Karnaugh_map"
"Jacek Karpiński", "1966", "Along with Ryszard S. Michalski, invented an early #{machine learning} algorithm for recognition of hand-written alphanumeric characters.", "Algorithms & Data Structures", "Machine Learning, Image recognition", "3", "https://en.wikipedia.org/wiki/Ryszard_S._Michalski#Biography"
"Jacek Karpiński", "1973", "Led the team who created the K-202 #{minicomputer}, an early 16-bit computer of which roughly 30 units were shipped.", "Algorithms & Data Structures, Early Computers", "Minicomputer", "3", "https://en.wikipedia.org/wiki/K-202"
"Alan Kay", "1966", "Coined the term '#{Object-Oriented Programming}, a programming paradigm based on stateful objects that interact with each other via message-passing.", "Algorithms & Data Structures, Programming Paradigms", "Object-Oriented Programming", "4", "https://en.wikipedia.org/wiki/Object-oriented_programming#History"
"Alan Kay", "1972", "Designed and implemented Smalltalk-72, an early version of the #{Smalltalk} programming language. Smalltalk would be hugely influential to future #{Object-Oriented programming} languages.", "Algorithms & Data Structures, Programming Languages", "Smalltalk, Object-Oriented Programming", "4", "https://en.wikipedia.org/wiki/Smalltalk"
"Alan Kay", "1980", "Led the team who developed Smalltalk-80, a version of the #{Smalltalk} programming language.", "Algorithms & Data Structures, Programming Languages", "Smalltalk, Object-Oriented Programming", "3", "https://en.wikipedia.org/wiki/Smalltalk"
"Alan Kay", "1995", "Along with Dan Ingells, co-designed the #{Squeak} programming language, an open source dialect of #{Smalltalk}.", "Algorithms & Data Structures, Programming Languages", "Object-Oriented Programming, Smalltalk, Squeak", "2", "https://en.wikipedia.org/wiki/Squeak"
"Stephen Cole Kleene", "1935", "Along with J. B. Rosser, proved that the original #{lambda calculus} was logically inconsistent, which prompted Alonzo Church to publish a simplified system we not call untyped lambda calculus.", "Algorithms & Data Structures, Theoretical Computer Science", "Lambda Calculus", "3", "https://en.wikipedia.org/wiki/Kleene%E2%80%93Rosser_paradox"
"Stephen Cole Kleene", "1938", "Made several fundamental contributions to recursion theory including Kleene's Recursion Theorem and the Kleene Hierarchy. This helped solidify the notion of computable recursive functions.", "Algorithms & Data Structures, Theoretical Computer Science", "Recursion Theory", "5", "https://en.wikipedia.org/wiki/Kleene%27s_recursion_theorem"
"Stephen Cole Kleene", "1956", "Invented #{Regular Expressions}, a pattern-matching system that describes the set of regular languages. They would be augmented and integrated into many programming languages and text editors for pattern matching on strings.", "Algorithms & Data Structures, Theoretical Computer Science", "Regular Expression", "5", "https://en.wikipedia.org/wiki/Regular_expression"
"Donald Knuth", "1962", "Published the first volume of his seminal work, ${The Art of Computer Programming}. TAOCP is still seen as the most comprehensive coverage of computer algorithms and their #{analysis|Big-O Notation}.", "Algorithms & Data Structures, Publications", "The Art of Computer Programming", "4", "https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming"
"Donald Knuth", "1976", "Published a paper that re-introduced and popularised the #{Big-Omicron|Big-O Notation}, Big-Theta and Big-Omega notations for the asymtotic analysis of algorithms. These mathematical notations are still the industry standard for evaluating the performance of algorithms.", "Algorithms & Data Structures, Publications", "Big-O Notation", "4", "https://en.wikipedia.org/wiki/Big_O_notation#History_.28Bachmann.E2.80.93Landau.2C_Hardy.2C_and_Vinogradov_notations.29"
"Donald Knuth", "1978", "Developed Tex, a software system for simplifying the process of typesetting books. Tex would become an industry-standard for formatting technical papers.", "Algorithms & Data Structures", "Tex", "2", "https://en.wikipedia.org/wiki/TeX"
"Leslie Lamport", "1979", "Published the first of several major papers on the topic of #{Distributed Systems}. A distributed system is a model in which components located on networked computers communicate and coordinate their actions by passing messages. These papers remain some of the most cited in all of computer science.", "Algorithms & Data Structures, Publications", "Distributed Systems", "4", "https://en.wikipedia.org/wiki/Leslie_Lamport#Career"
"Leslie Lamport", "1985", "Developed LaTeX, a typesetting system that comprises of a number of macros for #{Tex}. LaTeX is very popular in academia ot this day.", "Algorithms & Data Structures, Software", "LaTeX", "3", "https://en.wikipedia.org/wiki/LaTeX"
"Sergey Lebedev", "1950", "Designed the MESM mainframe computer. It was the first electronic computer in continental Europe and could perform roughly 3,000 operations per minute.", "Algorithms & Data Structures, Early Computers", "BESM", "3", "https://en.wikipedia.org/wiki/History_of_computer_hardware_in_Soviet_Bloc_countries#MESM"
"Sergey Lebedev", "1952", "Led the team who developed the #{BESM-1|BESM} mainframe computer, based on the earlier MESM computer. In it's day, it was the fastest computer in Europe.", "Algorithms & Data Structures, Early Computers", "BESM", "3", "https://en.wikipedia.org/wiki/History_of_computer_hardware_in_Soviet_Bloc_countries#MESM"
"Sergey Lebedev", "1965", "Chief Designer for the #{BESM-6|BESM} mainframe computer. It was in production for 20 years and became very popular in Soviet Russia.", "Algorithms & Data Structures, Early Computers", "BESM", "3", "http://www.computer-museum.ru/english/besm6.htm"
"Gottfried Wilhelm Leibniz", "1679", "Inspired by ancient texts, divised the modern binary (base-2) number system. The binary system is used to represent all information in modern computers.", "Algorithms & Data Structures, Mathematics", "Binary", "5", "https://en.wikipedia.org/wiki/Binary_number"
"Gottfried Wilhelm Leibniz", "1685", "Made several advances towards the notion of Symbolic #{Logic} and First-order Logic, especially in his 'Characteristica universalis', a formal language for expressing mathematical and metaphysical concepts. This would influence Gottlob Frege and George Boole.", "Algorithms & Data Structures, Mathematics", "Logic, Formal Languages", "5", "https://en.wikipedia.org/wiki/Characteristica_universalis"
"J.C.R Licklider", "1960", "Published 'Man-Computer Symbiosis', a publication that foretold and invenstigated the modern computer revolution and Human-Computer interaction. It inspired many concepts such as the graphical user interface and the #{ARPANET}.", "Algorithms & Data Structures, Publications", "Human-Computer Interaction, ARPANET", "4", "https://en.wikipedia.org/wiki/Man-Computer_Symbiosis"
"J.C.R Licklider", "1963", "Envisioned the 'Intergalactic Computer Network', the main and essential medium of informational interaction for governments, institutions, corporations, and individuals. It would directly inspire the #{ARPANET}, the pre-decessor of the #{Internet}.", "Algorithms & Data Structures, Internet", "ARPANET", "4", "https://en.wikipedia.org/wiki/Intergalactic_Computer_Network"
"J.C.R Licklider", "1963", "Funded and provided resources for many early advances in interactive computing, most notably the Douglas Engelbart at the Augmentation Research Center where the #{computer mouse|Mouse} was invented.", "Algorithms & Data Structures", "Mouse, Human-Computer Interaction", "3", "https://en.wikipedia.org/wiki/J._C._R._Licklider#Work"
"Ramon Llull", "1290", "Devised a system of #{logic} that consisted of organizing concepts using devices such as trees, ladders, and wheels. It would greatly influence future logicians, especially Gottfried Leibniz.", "Algorithms & Data Structures", "Logic", "4", "https://en.wikipedia.org/wiki/Ramon_Llull#Llull.27s_Art"
"Ada Lovelace", "1842", "Translated and expanded an article from the Italian Luigi Menabrae on the topic of Babbage's #{Analytical Engine}. Her expansions were extremely detailed and included an algorithm to compute Bernoulli numbers by the theoretical machine. For this she is often called the world's first computer programmer.", "Algorithms & Data Structures, Mathematics, Publications, Women in Computing", "Anaytical Engine", "5", "https://en.wikipedia.org/wiki/Ada_Lovelace#Work"
"John Mauchly", "1942", "Wrote a memo proposing the idea of building a general-purpose #{electronic computer} emphasizing the enormous speed advantage that could be gained by using digital electronics with no moving parts. It was well-received but not entirely understood.", "Algorithms & Data Structures, Publications, Early Computers", "ENIAC", "3", "http://archive.computerhistory.org/resources/text/Knuth_Don_X4100/PDF_index/k-8-pdf/k-8-u2600-Vacuum-Tubes-Calculating.pdf"
"John Mauchly", "1944", "Led the conceptual design of #{ENIAC}, the worlds first general-purpose #{electronic computer}. It was #{Turing-complete|Turing-Completeness}, digital and weighed nearly 20 tonnes. It was dubbed by the press as a 'Giant Brain'.", "Algorithms & Data Structures, Early Computers", "ENIAC", "3", "https://en.wikipedia.org/wiki/ENIAC"
"John Mauchly", "1945", "Along with J. Presper Eckert, independently developed the idea of the #{Stored-program computer} (now known as Von Neumann architecture) whilst designing the #{EDVAC} computer. The EDVAC, a general-purpose binary computer, was a successor to the #{ENIAC}.", "Algorithms & Data Structures, Early Computers", "ENIAC, EDVAC, Stored-program Computer", "5", "https://en.wikipedia.org/wiki/EDVAC"
"John Mauchly", "1949", "Along with J. Presper Eckert, produced the #{BINAC} binary #{stored-program computer} - one of the earliest business computer systems. The BINAC was the first machine to include a user manual. It was not widely used.", "Algorithms & Data Structures, Early Computers", "BINAC, Stored-program Computer", "3", "https://en.wikipedia.org/wiki/BINAC"
"John Mauchly", "1949", "Proposed the #{UNIVAC} SHORT CODE, the first programming language intended to be used on an electronic computer. It was implemented as a pseudocode interpreter.", "Algorithms & Data Structures, Programming Languages", "UNIVAC", "3", "https://www.computer.org/csdl/mags/an/1988/01/man1988010007-abs.html"
"John Mauchly", "1951", "Along with J. Presper Eckert, designed the #{UNIVAC I|UNIVAC} binary #{stored-program computer} - one of the earliest computer systems for commercial use. With a sample of just 1% of the voting population it famously predicted an Eisenhower landslide while the conventional wisdom favored Stevenson.", "Algorithms & Data Structures, Early Computers", "UNIVAC, Stored-program Computer", "5", "https://en.wikipedia.org/wiki/UNIVAC_I"
"John McCarthy", "1956", "Attended the famous Dartmouth Conferences where he coined the term '#{Artificial Intelligence}'. The Dartmouth Conferences were effectively a two month brainstorming session on topics including artificial intelligence, #{neural networks}, #{theory of computation} and #{natural language processing}.", "Algorithms & Data Structures", "Artificial Intelligence, Theory of Computation, Natural Language Processing, Neural Networks", "4", "https://en.wikipedia.org/wiki/Dartmouth_Conferences"
"John McCarthy", "1958", "In his paper 'Programs with Common Sense', proposed the 'Advice Taker'; a hypothetical computer program which used #{logic} to represent information and draw conclusions. It was an early example of #{artificial intelligence}.", "Algorithms & Data Structures, Publications", "Artificial Intelligence, Logic", "2", "https://en.wikipedia.org/wiki/Advice_taker"
"John McCarthy", "1958", "Invented #{Lisp}, a high-level programming language based on the #{lambda calculus}. Lisp became popular in the #{artificial intelligence} research and popularised many concepts in programming languages such as dynamic typing, linked lists, higher-order functions and recursion.", "Algorithms & Data Structures, Programming Languages", "Artificial Intelligence, Lisp", "5", "https://en.wikipedia.org/wiki/Lisp_(programming_language)"
"John McCarthy", "1959", "Invented a primitive method of #{garbage collection} to abstract away manual memory management in #{Lisp}. Garbage collection is a form of automatic memory management that attempts to free memory allocated to objects that are no longer in use in a running computer program.", "Algorithms & Data Structures, Programming Languages", "Lisp, Garbage Collection", "4", "https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"
"John McCarthy", "1959", "Served on the design committee for #{ALGOL} 60, an incredibly influential #{programming language} which introduced lexical scoping, code blocks and many syntactical elements common today (if, then, while, for, do, begin, end, etc).", "Algorithms & Data Structures, Programming Languages", "ALGOL", "4", "https://en.wikipedia.org/wiki/ALGOL_60"
"John McCarthy", "1961", "Proposed the idea of 'Utility Computing', a business model in which computing resources are supplied to customers on a by-demand basis. It would go on to inspire ideas in time-sharing models such as cloud computing.", "Algorithms & Data Structures, Publications", "Time-Sharing", "3", "https://en.wikipedia.org/wiki/Utility_computing"
"Marvin Minsky", "1951", "Invented Stochastic Neural-Analog Reinforcement Computer (SNARC), the first randomly wired #{neural network} learning machine. SNARC was based on reinforcing the synaptic connections that contributed to recent reactions.", "Algorithms & Data Structures, Robotics", "Artificial Intelligence, Neural Netwokrs", "2", "http://web.media.mit.edu/~minsky/minskybiog.html"
"Marvin Minsky", "1969", "Co-authored (with Seymour Papert) 'Perceptrons', a foundational study into artificial #{neural networks}. The book has caused much controversy as it's pessimistic predictions may have helped bring upon the 'AI winter' of the 1980's.", "Algorithms & Data Structures, Publications", "Artificial Intelligence, Neural Networks", "2", "https://en.wikipedia.org/wiki/Perceptrons_(book)"
"Marvin Minsky", "1972", "Co-invented the first #{Logo} turtle device, an educational robot that was capable of interpreting the #{Logo} programming language. The robots were capable of outputting results onto a peice of paper via a mounted pen.", "Algorithms & Data Structures, Robotics", "Logo", "2", "https://en.wikipedia.org/wiki/Turtle_(robot)"
"Peter Naur", "1959", "Served on the design committee for #{ALGOL} 60, an incredibly influential #{programming language} which introduced lexical scoping, code blocks and many syntactical elements common today (if, then, while, for, do, begin, end, etc).", "Algorithms & Data Structures, Programming Languages", "ALGOL", "4", "https://en.wikipedia.org/wiki/ALGOL_60"
"Peter Naur", "1963", "Extended the #{Backus-Naur Form} for use in #{ALGOL} 60. BNF is a notation for context-free grammars which is used to describe the syntax of #{programming languages|programming language}.", "Algorithms & Data Structures", "ALGOL, Backus-Naur Form, Backus Normal Form, Programming Language", "4", "https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form"
"Max Newman", "1935", "Presented several lectures at Cambridge on #{logic} and Godel's #{incompleteness theorem}, which inspired Alan Turing to pursue pioneering work on the #{Entscheidungsproblem} using a #{hypothetical computing machine|Turing Machine}.", "Algorithms & Data Structures, Publications", "Entscheidungsproblem, Logic", "3", "https://en.wikipedia.org/wiki/Entscheidungsproblem"
"Max Newman", "1943", "Posed problems that would lead and influence the design of the #{Colossus} computer at Bletchley Park. Colossus, designed by Tommy Flowers, was the world's first programmable, electronic, digital computer.", "Algorithms & Data Structures, Early Computers", "Colossus, Bletchley Park", "3", "https://en.wikipedia.org/wiki/Colossus_computer"
"John von Neumann", "1945", "Invented #{Merge sort}, an efficient recursive sorting algorithm in which two halves of an array are sorted recursively and then merged.", "Algorithms & Data Structures", "Merge sort", "4", "https://en.wikipedia.org/wiki/Merge_sort"
"John von Neumann", "1950", "Made several contributions to random number generation, specifically his algorithm for 'fair coin' simulation, which are now implement in hardware random number generators. Neumann also contributed to the 'Monte Carlo method', although his approach is now seen as a historical curiosity more than a practical approach.", "Algorithms & Data Structures", "Random nuber generation", "2", "https://en.wikipedia.org/wiki/Monte_Carlo_method"
"John von Neumann", "1950", "Published the 'First draft of a report on the #{EDVAC}', an incomplete 101-page document which contains the first published description of the logical design of a computer using the #{stored-program|Stored-program Computer} concept. Although the concept of stored-program computers had already existed, the concept is now universally and controversially known as 'Von Neumann Architecture'.", "Algorithms & Data Structures, Publications", "Stored-program Computer, EDVAC", "4", "https://en.wikipedia.org/wiki/First_Draft_of_a_Report_on_the_EDVAC"
"John von Neumann", "1948", "Acted as consultant for several improvements made to the #{ENIAC} computer. These improvements reduced the speed of the ENIAC by a factor of six, but also reduced the reprogramming time to hours instead of days and so it was considered well worth the loss of performance.", "Algorithms & Data Structures, Early Computers", "ENIAC", "2", "https://en.wikipedia.org/wiki/ENIAC#Improvements"
"John von Neumann", "1949", "Along with Stanislaw Ulam, founded the field of #{Cellular automata} - self-replicating systems with a grid of cells that can be in a finite number of states. Cellular automata are commonly used to demonstrate the ability for complexity to arise from simple beginnings. His early work in this field is also considered by many to contain the world's first computer #{virus}.", "Algorithms & Data Structures", "Cellular automata", "3", "https://en.wikipedia.org/wiki/IAS_machine"
"John von Neumann", "1952", "Designed the 'IAS Machine', an early binary, electronic #{stored-program computer}. It was one of the first stored-program computers in operation in the USA.", "Algorithms & Data Structures, Early Computers", "IAS Machine, Stored-program Computer", "2", "https://en.wikipedia.org/wiki/IAS_machine"
"Kristen Nygaard", "1962", "Invented #{Simula I|Simula} (with Ole-Johan Dahl) as a superset of #{ALGOL 60|ALGOL} for simulating discrete event systems.", "Algorithms & Data Structures, Programming Languages", "Object-Oriented Programming, Simula, ALGOL", "4", "https://en.wikipedia.org/wiki/Simula"
"Kristen Nygaard", "1967", "Published #{Simula 67|Simula} (with Ole-Johan Dahl), an updated version of #{Simula I|Simula}. Simula 67 is considered the first #{object-oriented programming} language as it introduced many OO concepts such as objects, classes, subclasses and inheritance.", "Algorithms & Data Structures", "Object-Oriented Programming, Simula, ALGOL", "5", "https://en.wikipedia.org/wiki/Simula"
"James Cooley", "1965", "Along with John W. Tukey, (re)invented and popularized a #{Fast Fourier transform} (FFT) algorithm. FFT's are widely used for many applications in engineering, science, and mathematics.", "Algorithms & Data Structures", "Fast Fourier transform", "3", "https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm"
"John W. Tukey", "1945", "Coined the term 'bit' as a contraction of the term 'binary digit'. A bit is the most basic unit of information in computer systems.", "Algorithms & Data Structures", "Bit", "2", "http://www.linfo.org/bit.html"
"John W. Tukey", "1957", "Coined the term 'software' in his paper 'The Teaching of Concrete Mathematics'. Although it is claimed the term already existed since atleast 1953, Tukey's paper is the earliest known publication containing it.", "Algorithms & Data Structures", "Software", "2", "https://en.wikipedia.org/wiki/Software"
"John W. Tukey", "1965", "Along with James Cooley, (re)invented and popularized a #{Fast Fourier transform} (FFT) algorithm. FFT's are widely used for many applications in engineering, science, and mathematics.", "Algorithms & Data Structures", "Fast Fourier transform", "3", "https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm"
"Blaise Pascal", "1642", "Whilst still a teenager, invented the #{mechanical calculator} (AKA Pascaline), a device for automatically performing the basic operations of arithmatic. This would go on to influence future efforts like Babbage's #{difference engine}.", "Algorithms & Data Structures, Early Computers", "Mechanical Calculator", "5", "https://en.wikipedia.org/wiki/Mechanical_calculator"
"Emil Leon Post", "1936", "Developed, independently of Alan #{Turing|Turing Machine}, a mathematical model of computation that he called 'Formulation 1', although it is now known as the #{Post-Turing Machine}.", "Algorithms & Data Structures, Early Computers", "Mechanical Calculator", "5", "https://en.wikipedia.org/wiki/Post%E2%80%93Turing_machine"
"Emil Leon Post", "1943", "Published the 'Post Canonical Systen', a #{Turing-complete|Turing-Completeness} string-manipulation system that can generate formal languages. This helped formalise many ideas used in programming language grammars today.", "Algorithms & Data Structures, Publications", "Formal Grammar", "4", "https://en.wikipedia.org/wiki/Post_canonical_system"
"Emil Leon Post", "1946", "Posed the 'Post correspondence problem', an undecidable decision-problem that is simpler than the #{halting problem} and the #{Entscheidungsproblem}. An undecidable problem is one for which there is no known algorithm that always leads to a correct answer.", "Algorithms & Data Structures, Publications", "Formal Grammar", "4", "https://en.wikipedia.org/wiki/Post_correspondence_problem"
"Dennis Ritchie", "1969", "Along with Ken Thompson, developed the first version of #{Unix}, a multitasking operating system. Unix, hailed as a hallmark of beautiful software design, is still in use by millions of users today.", "Algorithms & Data Structures, Operating Systems", "Unix", "5", "https://en.wikipedia.org/wiki/Unix"
"Dennis Ritchie", "1972", "Developed the first version of #{C} - a high-level, imperative programming language - on a #{PDP-11|PDP} minicomputer. C has since become one of the most well-known programming languages of all time.", "Algorithms & Data Structures, Programming Languages", "C", "5", "https://en.wikipedia.org/wiki/C_(programming_language)"
"Dennis Ritchie", "1978", "Co-authored the book 'The C Programming Language', also known as simply K&R. It quickly became the de facto standard for C programming and has since, because of it's clear and concise style, become a model for technical writing.", "Algorithms & Data Structures, Publications", "C", "4", "https://en.wikipedia.org/wiki/The_C_Programming_Language"
"Ken Thompson", "1968", "Wrote a version of the QED text editor that allowed users to search text using regular expressions. This was the first text editor with such functionality.", "Algorithms & Data Structures", "Text editors, Regular Expressions", "3", "https://en.wikipedia.org/wiki/QED_(text_editor)"
"Ken Thompson", "1968", "Developed 'Thompson's Construction Algorithm' used for converting regular expression into nondeterministic finite automaton, which allowed for faster expression matching.", "Algorithms & Data Structures", "Regular Expressions", "2", "https://en.wikipedia.org/wiki/Thompson%27s_construction"
"Ken Thompson", "1969", "Along with Dennis Ritchie, developed the first version of #{Unix}, a multitasking operating system. Unix, hailed as a hallmark of beautiful software design, is still in use by millions of users today.", "Algorithms & Data Structures, Operating Systems", "Unix", "5", "https://en.wikipedia.org/wiki/Unix"
"Ken Thompson", "1969", "Created #{B}, a low-level imperative untyped programming language, for use on the #{Unix} operating system. B was the pre-decessor to #{C}. B is notable for introducing the increment and decrement shortcuts such as '++', '-=', '+=', etc.", "Algorithms & Data Structures, Programming Languages", "B", "2", "https://en.wikipedia.org/wiki/C_(programming_language)"
"Ken Thompson", "1992", "Along with Rob Pike, created the #{UTF-8} encoding scheme. UTF-8 supports all code-points of the Unicode character set and is the dominant encoding scheme on the #{World Wide Web} accounting for billions of web pages.", "Algorithms & Data Structures", "UTF-8", "3", "https://en.wikipedia.org/wiki/UTF-8"
"Ken Thompson", "2007", "Along with Robert Griesemer and Rob Pike, designed the #{Go} programming language. Go was motivated by the designers shared disliking of the complexity of #{C++}. Go is compiled, statically-typed and uses an #{ALGOL}-like syntax.", "Algorithms & Data Structures, Programming Languages", "Go", "3", "https://en.wikipedia.org/wiki/Go_(programming_language)"
"Saul Rosen", "1957", "Designed the software (including a #{FORTRAN} compiler) for the first fully-commercial transistorized computer; the Philco Transac S-2000.", "Algorithms & Data Structures, Early Computers", "FORTRAN, Transistor", "4", "https://www.rcac.purdue.edu/about/saul-rosen/"
"Bertrand Russell", "1908", "Introduced the notion of #{Type theory} in an attempt to avoid paradoxes found in many formal systems of logic and rewrite systems. Type theory is closely ralated to #{type systems}, which are features of programming languages to help reduce bugs and provide rigidity to programs.", "Algorithms & Data Structures, Foundations", "Type theory, Type systems, Formal languages", "4", "https://en.wikipedia.org/wiki/Type_theory"
"Bertrand Russell", "1910", "Along with Alfred North Whitehead, introduced the notion of a #{Type system} in their seminal work on mathematical logic: Principia Mathematica.", "Algorithms & Data Structures, Foundations", "Type theory, Type systems", "4", "https://en.wikipedia.org/wiki/Principia_Mathematica"
