Name, Date, Achievement, Topics, Tags, Impact, Source
"Muhammad ibn Musa al-Khwarizmi", "800", "The term '#{algorithm}' is derived from the algorism, the technique of performing arithmetic with Hindu-Arabic numerals developed by al-Khwarizmi. Both '#{algorithm}' and 'algorism' are derived from the Latinized forms of al-Khwarizmi's name, Algoritmi and Algorismi, respectively.", "Algorithms & Data Structures", "Mathematics, Algorithm", "5", "https://en.wikipedia.org/wiki/Muhammad_ibn_Musa_al-Khwarizmi#Arithmetic"
"John Vincent Atanasoff", "1939", "The #{Atanasoff-Berry computer} (ABC) was the first automatic #{electronic digital computer|electronic computer}. The ABC's priority is debated among historians of computer technology, because it was not programmable, nor Turing-complete.", "Algorithms & Data Structures", "Electronic Computer, Computer", "4", "https://en.wikipedia.org/wiki/Atanasoff%E2%80%93Berry_computer"
"Charles Babbage", "1825", "Invented the #{Difference Engine}, an automatic mechanical calculator designed to tabulate polynomial functions. It was not programmable, nor Turing-complete.", "Algorithms & Data Structures", "Difference Engine, Mechanical Computer, Computer", "5", "https://en.wikipedia.org/wiki/Difference_engine"
"Charles Babbage", "1837", "Designed the #{Analytical Engine}. The first, general-purpose, programmable computer. It was 100 years ahead of it's time.", "Algorithms & Data Structures", "Analytical Engine, Mechanical Computer, Computer, Punch Cards", "5", "https://en.wikipedia.org/wiki/Analytical_engine"
"John Backus", "1953", "Created #{Speedcoding}, also known As #{Speedcode}, the first high level #{programming language} built for an #{IBM} computer.", "Algorithms & Data Structures", "Speedcoding, Speedcode, Programming Language, IBM", "4", "https://en.wikipedia.org/wiki/Speedcoding"
"John Backus", "1954", "Lead a team who developed #{FORTRAN} for the #{IBM} 704 computer. #{FORTRAN} was one of the first high-level #{programming languages|programming language} that saw wide-spread use.", "Algorithms & Data Structures", "FORTRAN, Programming Language, IBM", "5", "https://en.wikipedia.org/wiki/Fortran"
"John Backus", "1959", "Served on the design committee for #{ALGOL} 60, an incredibly influential #{programming language} which introduced lexical scoping, code blocks and many syntactical elements common today (if, then, while, for, do, begin, end, etc).", "Algorithms & Data Structures", "ALGOL, Programming Language", "4", "https://en.wikipedia.org/wiki/ALGOL_60"
"John Backus", "1960", "Invented the Backus-Naur Form (previously known as Backus Normal Form), a notation for context-free grammars which is used to describe the syntax of #{programming languages|programming language}.", "Algorithms & Data Structures", "BNF, Backus-Naur Form, Backus Normal Form, Programming Language", "4", "https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form"
"John Backus", "1977", "Created #{FP}, a function-level #{programming language}. #{FP} helped spark an interest in the #{functional programming} paradigm.", "Algorithms & Data Structures", "FP, Functional Programming, Function-Level Programming, Programming Language", "2", "https://en.wikipedia.org/wiki/FP_(programming_language)"
"John Backus", "1989", "Created #{FL}, a #{function-level programming} language that is considered a successor to #{FP}.", "Algorithms & Data Structures", "FL, Function-Level Programming, Functional Programming, Programming Language", "2", "https://en.wikipedia.org/wiki/FL_(programming_language)"
"Jean Bartik", "1946", "Became one of the six original programmers on #{ENIAC}.", "Algorithms & Data Structures", "ENIAC, Programming", "3", "https://en.wikipedia.org/wiki/ENIAC#Programming"
"Jean Bartik", "1948", "Was part of a team charged with developing the concept of the 'stored program #{computer}'.", "Algorithms & Data Structures", "Computer", "3", "https://en.wikipedia.org/wiki/Stored-program_computer"
"Jean Bartik", "1949", "Helped develop the #{BINAC} AND #{UNIVAC} I computers.", "Algorithms & Data Structures", "BINAC, UNIVAC, Programming, Computer", "3", "https://en.wikipedia.org/wiki/Jean_Bartik#Career_as_a_computer_programmer"
"Tim Berners-Lee", "1980", "Invented ENQUIRE, a system for sharing documents over the #{Internet}.", "Algorithms & Data Structures", "Internet, WWW", "4", "https://en.wikipedia.org/wiki/ENQUIRE"
"Tim Berners-Lee", "1989", "Invented WorldWideWeb, the first #{Web Browser|WWW}.", "Algorithms & Data Structures", "Internet, WWW", "5", "https://en.wikipedia.org/wiki/WorldWideWeb"
"Tim Berners-Lee", "1990", "Along with Ari Luotonen and Henrik Frystyk, invented CERN HTTPd, the first #{Web Server|HTTP}. It ran as a daemon and was written in C.", "Algorithms & Data Structures", "Internet, WWW, HTTP", "5", "https://en.wikipedia.org/wiki/CERN_httpd"
"Tim Berners-Lee", "1990", "Specified #{HTML}, an SGML-based markup language for describing #{hypertext} documents. Originally, #{HTML} only included 18 tags.", "Algorithms & Data Structures", "Internet, Hypertext, WWW, HTML", "5", "https://en.wikipedia.org/wiki/HTML"
"Tim Berners-Lee", "1991", "Formally released the Hypertext Transport Protocol (#{HTTP}) version 0.9 along with a team of Engineers. #{HTTP} v0.9 was only capable of GET requests.", "Algorithms & Data Structures", "Internet, WWW, HTTP", "5", "https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"
"George Boole", "1847", "Invented Symbolic #{Logic}, the basis for Boolean Algebra, a mathematical system for describing logical relations. It would become the basis for electronic #{circuit design}.", "Algorithms & Data Structures", "Mathematics, Logic, Circuit Design", "5", "https://en.wikipedia.org/wiki/Boolean_algebra"
"George Boole", "1854", "Published 'The Laws of Thought', which further laid-out #{algebraic logic|Logic}.", "Algorithms & Data Structures", "Mathematics, Logic", "4", "https://en.wikipedia.org/wiki/The_Laws_of_Thought"
"Per Brinch Hansen", "1969", "Primary developer of the RC 4000 Multiprogramming System (also known as Monitor), the first #{operating system} to implement a kernel. Although not particularly successful, it was hugely influential in the design of future #{operating systems}.", "Algorithms & Data Structures", "Operating System, RC 4000", "3", "https://en.wikipedia.org/wiki/RC_4000_multiprogramming_system"
"Per Brinch Hansen", "1973", "Published 'Operating System Principles', the first comprehensive textbok on #{operating systems}. It was hailed for it's simplicity and clarity in treatment of a complex subject.", "Algorithms & Data Structures", "Operating System, Book", "3", "https://en.wikipedia.org/wiki/Per_Brinch_Hansen#Operating_Systems"
"Per Brinch Hansen", "1973", "Along with Tony Hoare, invented #{Monitors}, a construct for allowing #{threads|Concurrency} to have mutual exclusion and the ability to wait/block for conditions to become true.", "Algorithms & Data Structures", "Concurrency, Monitors", "3", "https://en.wikipedia.org/wiki/Per_Brinch_Hansen#Operating_Systems"
"Per Brinch Hansen", "1975", "Invented Concurrent #{Pascal}, the first #{programming language} to implement #{monitors}.", "Algorithms & Data Structures", "Concurrency, Programming Language, Pascal, Monitors", "3", "https://en.wikipedia.org/wiki/Concurrent_Pascal"
"Per Brinch Hansen", "1977", "Published 'The Architecture of Concurrent Programs', the first comprehensive textbok on #{concurrent programming|Concurrency}.", "Algorithms & Data Structures", "Concurrency, Book", "2", "https://en.wikipedia.org/wiki/Per_Brinch_Hansen#Operating_Systems"
"Per Brinch Hansen", "1978", "Published a paper on #{distributed proceses|Distributed Computing}, which introduced concepts which are now known as #{remote procedure calling|RPC} (RPC). RPC is a technique for executing code in a remote address space (such as another computer in a network).", "Algorithms & Data Structures", "Distributed Computing, RPC, Paper", "3", "https://en.wikipedia.org/wiki/Remote_procedure_call"
"Nikolay Brusentsov", "1958", "Invented #{Setun}, a balanced #{ternary} #{computer}. Setun used three fundamental values (-1, 0, 1) instead of the more common two values (0, 1) in #{binary} computers.", "Algorithms & Data Structures", "Computer, Ternary, Setun", "3", "https://en.wikipedia.org/wiki/Setun"
"Nikolay Brusentsov", "1970", "Invented #{Setun} 70, whose #{CPU} design presented many concepts that would later be incorporated (perhaps independently) into the #{Reduced Instruction-Set Computing|RISC} (RISC) architecture.", "Algorithms & Data Structures", "Computer, Setun, RISC, CPU", "3", "http://en.uacomputing.com/persons/brusentsov/"
"Vannevar Bush", "1945", "Published 'As We May Think', an article which introduced the #{Memex} - a theoretical electronic device that would allow users to store and retrieve books, records and communications. The design involved linking documents via association, which would come to be very influential in the creation of #{hypertext} systems.", "Algorithms & Data Structures", "Computer, Memex, Hypertext", "4", "https://en.wikipedia.org/wiki/Memex"
"David Caminer", "1951", "Helped design the #{Lyons Electonic Office} (LEO) computer, which was the first business #{computer}. For his effort, David Caminer is often called the world's first Software Engineer.", "Algorithms & Data Structures", "Computer, LEO", "3", "https://en.wikipedia.org/wiki/LEO_%28computer%29"
"Vint Cerf", "1973", "Conducted research around the notion of packet-switching #{network|Networking} protocols.", "Algorithms & Data Structures", "Networking, Internet", "3", "https://en.wikipedia.org/wiki/Vint_Cerf"
"Vint Cerf", "1975", "Co-designed the #{TCP/IP} #{network|Networking} protocol suite for the US Department of Defense.", "Algorithms & Data Structures", "TCP/IP, Networking, Internet", "4", "https://en.wikipedia.org/wiki/Internet_protocol_suite"
"Vint Cerf", "1984", "Lead engineer on MCI Mail, the first commercial #{email} service to be connected to the #{Internet}", "Algorithms & Data Structures", "Email, Networking, Internet", "4", "https://en.wikipedia.org/wiki/MCI_Mail"
"Vint Cerf", "1992", "Co-founded the Internet Society to provide guidance for standards and education related to the #{Internet}.", "Algorithms & Data Structures", "Internet", "2", "https://en.wikipedia.org/wiki/Internet_Society"
"Noam Chomsky", "1956", "Invented the Chomsky Hierarchy, which is a set of classes of formal grammars that have become especially important in the creation of #{compilers} and #{interpreters} in #{computer programming|Programming Language}.", "Algorithms & Data Structures", "Compiler, Programming Language, Formal Grammar", "4", "https://en.wikipedia.org/wiki/Chomsky_hierarchy"
"Alonzo Church", "1936", "Invented #{lambda calculus}, a formal mathematical system for presenting #{computation} based purely on function abstraction and application. Lambda calculus proved to be a universal model of #{computation} that would be incredibly important in the development of #{programming languages}.", "Algorithms & Data Structures", "Lambda Calculus, Computation, Programming Language", "5", "https://en.wikipedia.org/wiki/Lambda_calculus"
"Alonzo Church", "1935", "Provided a negative answer to the #{Entscheidungsproblem}, which asks if there is an algorithm to determine if an axiom is true in all models of a theory. This would have great impact on the theory of #{computation} in later years.", "Algorithms & Data Structures", "Computation, Entscheidungsproblem", "4", "https://en.wikipedia.org/wiki/Entscheidungsproblem"
"Alonzo Church", "1936", "Co-articulated what has become known as the #{Church-Turing Thesis}, which asserts that for any operation carried out by an algorithm there exists an equivalent #{lambda expression|Lambda Calculus} (or #{Turing Machine}). This would have great impact on the theory of #{computation} in later years.", "Algorithms & Data Structures", "Computation, Church-Turing Thesis", "5", "https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis"
"Wesley A. Clark", "1955", "Created the logic systems for the #{TX-0} (Transistorized Experimental computer zero) #{computer}, an early fully-transistorized digital computer that was used at MIT.", "Algorithms & Data Structures", "Computer, TX-0, Computer", "3", "https://en.wikipedia.org/wiki/TX-0"
"Wesley A. Clark", "1958", "Chief Architect for the #{TX-2} (Transistorized Experimental computer two) #{computer}, an early fully-transistorized digital computer that was important in the advancement of the field of #{artificial intelligence}.", "Algorithms & Data Structures", "Computer, TX-2, Computer, Artificial Intelligence", "3", "https://en.wikipedia.org/wiki/TX-2"
"Wesley A. Clark", "1962", "Co-designed #{LINC}, the world's first #{minicomputer} and forerunner to the now ubiquitous personal #{computer}. #{LINC} would go on to inspire many ideas for the wildly successful #{PDP-8} minicomputer.", "Algorithms & Data Structures", "Computer, Minicomputer, LINC, Computer", "4", "https://en.wikipedia.org/wiki/LINC"
"Edmund M. Clarke", "1979", "Published a paper proving that for certain #{programming language} constructs it is impossible to obtain good #{Hoare Axiom Systems|Hoare Logic}. The paper demonstrated that #{recursive|Recursion} procedures with parameters in languages with a static scope for identifiers and #{coroutines} in languages that allow parameterless #{recursive|Recursion} procedures cannot be proven correct via the #{Hoare Logic} formal system.", "Algorithms & Data Structures", "Programming Language, Hoare Logic", "2", "http://www.cs.cmu.edu/~emc/papers/Papers%20In%20Refereed%20Journals/79_impossible_hoareaxiom.pdf"
"Edmund M. Clarke", "1981", "Along with his student E. Allen Emerson, invented and developed #{model checking}, a system for mathematically verifying that a given model meets a formal specification. This would become important for the verification of hardware systems.", "Algorithms & Data Structures", "Model Checking, Hardware", "3", "https://en.wikipedia.org/wiki/Model_checking"
"Edgar F. Codd", "1970", "Published a paper entitled 'A Relational Model of Data for Large Shared Data Banks', which laid the theoretical foundations for relational databases and query languages such as SQL.", "Algorithms & Data Structures", "Database, Relational Database", "4", "https://en.wikipedia.org/wiki/Edgar_F._Codd#Work"
"Douglas Engelbart", "1965", "Along with his team, invented the concepts for bitmapped screen displays.", "Algorithms & Data Structures", "Bitmap, Hardware", "4", "https://en.wikipedia.org/wiki/Raster_graphics"
"Douglas Engelbart", "1965", "Along with his team, invented early systems implementing the foundations for #{hypertext} - interlinked systems of documents.", "Algorithms & Data Structures", "Hypertext, Internet", "4", "https://en.wikipedia.org/wiki/Hypertext#History"
"Douglas Engelbart", "1967", "Along with Bill English, invented the #{computer mouse|Mouse} in the form of a wooden shell atop two metal wheels. It was described as an 'X-Y position indicator for a display system'.", "Algorithms & Data Structures", "Mouse, Hardware", "5", "https://en.wikipedia.org/wiki/Computer_mouse"
"Douglas Engelbart", "1968", "Presented and demonstrated original inventions including the #{Computer Mouse|Mouse}, #{Computer Networks|Network}, #{Hypertext} and several others.", "Algorithms & Data Structures", "Demonstration", "2", "https://en.wikipedia.org/wiki/The_Mother_of_All_Demos"
"E. Allen Emerson", "1981", "Along with Edmund M. Clarke, invented and developed #{model checking}, a system for mathematically verifying that a given model meets a formal specification. This would become important for the verification of hardware systems.", "Algorithms & Data Structures", "Model Checking, Hardware", "3", "https://en.wikipedia.org/wiki/Model_checking"
"Stephen Cook", "1971", "Published the seminal paper 'The Complexity of Theorem Proving Procedures', which introduced the notions of Cook Reduction and #{NP-Completeness|NP-Complete}. NP-Completeness refers to problems for which no efficient algorithm exists. The paper also famously posed the #{P vs. NP} question.", "Algorithms & Data Structures", "NP-Complete, Computation, Complexity, P vs. NP", "4", "https://en.wikipedia.org/wiki/NP-complete"
